# Definition for a  binary tree node
class TreeNode:
    def __init__(self, x):
      self.val = x
      self.left = None
      self.right = None
    def printSelf(self):
      stack = []
      stack.append(self)
      sString = "{"
      
      retList = []
      if self.left==None and self.right==None and self.val == '#':
        sString = sString + ","
      else:      
        for item in stack:          
          sString = sString + item.val + ","
          retList.append(item.val)
          
          if item.left!=None and item.right!=None and item.left.val == '#' and item.right.val == '#':
            continue
            
          if item.left!=None:
            stack.append(item.left)
          if item.right!=None:
            stack.append(item.right)
          
      sString = sString[0:len(sString)-1] + '}'
      #print sString
      return sString
      

class Solution:
    def printOneItem(self,item):      
      #Print
      sString = "Item: "
      for i in item:
        sString = sString + str(i) + ","
      print sString
    
    
    def printResult(self):      
      #Print
      sString = "Item: "
      for row in self.result:
        for item in row:
          for i in item:
            i.printSelf()
            
    def printTop(self):
      reList = []
      sString = "["
      row = self.result[len(self.result)-1]
      for item in row:
        for i in item:
          reList.append(i)#.printSelf())
          #sString = sString + i.printSelf() + ","
      
      
      sString = sString[0:len(sString)-1] + ']'
      return reList

    def getResult(self,iRow,iColumn):
      row = self.result[iRow]
      result = row[iColumn]     
      
      return row[iColumn]
    # @return a list of tree node
    def generateTrees(self, n):
      #Init
      self.result = []
      first_row = []
      for i in range(0,n+1):
        row_item = [TreeNode('#')]
        first_row.append(row_item)
      self.result.append(first_row)
      #self.printResult()
      
      #start
      for level in range(1,n+1):
        row = []
        for start_item in range(0,n-level+1):
          '''if(level == 1):
            row_item = [[start_item+1]]
            row.append(row_item)
          else:'''
          row_item = []
          for head_item in range(start_item,start_item+level):
              if head_item < n:
                left_row=  head_item - start_item
                right_row = start_item + level - (head_item + 1)
                #print str(left_row) + "," + str(right_row) + "," + str(head_item) + "," + str(start_item) + "," + str(level)
                
                left_result = self.getResult(left_row,start_item)
                right_result = self.getResult(right_row, head_item+1)
                
                for left_item in left_result:
                  for right_item in right_result:
                    new_item = TreeNode(str(head_item+1))
                    new_item.left = left_item
                    new_item.right = right_item
                    
                    #new_item.printSelf()
                    
                    row_item.append(new_item)
            
          row.append(row_item)
        #print len(row)
      
        #print "append!"
        self.result.append(row)
        #self.printResult()
      
      #print "RRR"
      return self.printTop()
                

if __name__ == '__main__':
    sol = Solution()
    sol.generateTrees(0)
                
